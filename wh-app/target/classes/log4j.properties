###############################################################################
#定义最低输出基本为INFO, 
#定义各输出设备的名字：
#stdout表示控制台输出；
#INFOF表示info级别的日志输出
#WARNF表示warn级别的日志输出
#ERRORF表示error级别的日志输出
#FATALF表示fatal级别的日志输出

log4j.rootLogger = INFO, stdout, INFOF, WARNF, ERRORF

### 输出到控制台 ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}-[%p] [%l] %m%n


## 输出到日志文件,每天生成一个日志，配置log4j.appender.IF.Threshold = INFO,实际是INFO或者INFO以上级别的日志，都会记录在该文件中 ###
log4j.appender.INFOF = org.apache.log4j.DailyRollingFileAppender
log4j.appender.INFOF.File = ./log/info.log
log4j.appender.INFOF.Append = true
#定义日志输出级别，该日志文件中，可输出INFO、WARN、ERROR、FATAL级别的文件
log4j.appender.INFOF.Threshold = INFO
log4j.appender.INFOF.layout = org.apache.log4j.PatternLayout
#后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。
log4j.appender.EF.MaxFileSize=100MB
#指定可以产生的滚动文件的最大数。
log4j.appender.INFOF.MaxBackupIndex=2
#配置级别拦截，其中myrange为拦截器的名字，这个必须要有（暂时不好用，原因为查明）
#log4j.appender.INFOF.filter.myrange=org.apache.log4j.varia.LevelRangeFilter 
#log4j.appender.INFOF.filter.myrange.levelMax=INFO 
#log4j.appender.INFOF.filter.myrange.levelMin=INFO 
log4j.appender.IF.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}-[%p] [%l] %m%n


### 保存异常信息到单独文件，每天生成一个日志，其中log4j.appender.EF.Threshold = ERROR，表示ERROR以及ERROR以上级别的日志，要记录在该文件中 ###
log4j.appender.WARNF= org.apache.log4j.DailyRollingFileAppender
log4j.appender.WARNF.File = ./log/warn.log 
log4j.appender.WARNF.Append = true
#定义日志输出级别，该日志文件中，可输出WARN、ERROR、FATAL级别的文件
log4j.appender.WARNF.Threshold = WARN
log4j.appender.WARNF.layout = org.apache.log4j.PatternLayout
# 后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。
log4j.appender.WARNF.MaxFileSize=100MB
#指定可以产生的滚动文件的最大数。
log4j.appender.WARNF.MaxBackupIndex=2
#配置级别拦截，其中myrange为拦截器的名字，这个必须要有（暂时不好用，原因为查明）
#log4j.appender.WARNF.filter.myrange=org.apache.log4j.varia.LevelRangeFilter 
#log4j.appender.WARNF.filter.myrange.levelMax=WARN
#log4j.appender.ERRORF.filter.myrange.levelMin=WARN
log4j.appender.ERRORF.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}-[%p] [%l] %m%n

### 保存异常信息到单独文件，每天生成一个日志，其中log4j.appender.EF.Threshold = ERROR，表示ERROR以及ERROR以上级别的日志，要记录在该文件中 ###
log4j.appender.ERRORF = org.apache.log4j.DailyRollingFileAppender
log4j.appender.ERRORF.File = ./log/error.log 
log4j.appender.ERRORF.Append = true
#定义日志输出级别，该日志文件中，可输出WARN、ERROR、FATAL级别的文件
log4j.appender.ERRORF.Threshold = ERROR 
log4j.appender.ERRORF.layout = org.apache.log4j.PatternLayout
# 后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。
log4j.appender.EF.MaxFileSize=100MB
#指定可以产生的滚动文件的最大数。
log4j.appender.ERRORF.MaxBackupIndex=2
#配置级别拦截，其中myrange为拦截器的名字，这个必须要有（暂时不好用，原因为查明）
#log4j.appender.ERRORF.filter.myrange=org.apache.log4j.varia.LevelRangeFilter 
#log4j.appender.ERRORF.filter.myrange.levelMax=ERROR 
#log4j.appender.ERRORF.filter.myrange.levelMin=ERROR 
log4j.appender.ERRORF.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}-[%p] [%l] %m%n

#mybatis配置
#Rules reminder:  # DEBUG < INFO < WARN < ERROR < FATAL 
#Global logging configuration  
log4j.logger.org.apache.ibatis=debug,stdout  
log4j.logger.java.sql=debug,stdout   
#My logging configuration... 
log4j.logger.com.baoku=ERROR 
log4j.logger.org.apache.ibatis=ERROR  
log4j.appender.stdout=org.apache.log4j.ConsoleAppender 
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout 
log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n
#mybatis logger config
log4j.logger.com.ibatis=ERROR
log4j.logger.org.apache.ibatis.jdbc.ScriptRunner=ERROR
log4j.logger.java.sql.Connection=DEBUG
#log4j.logger.java.sql.Statement=DEBUG
log4j.logger.java.sql.PreparedStatement=DEBUG,stdout
log4j.logger.org.springframework=info
